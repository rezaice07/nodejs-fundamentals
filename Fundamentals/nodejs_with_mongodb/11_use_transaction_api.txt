

Use Mongodb Transaction
--------------------------------


require('dotenv').config();
const { MongoClient, ClientSession } = require("mongodb");
const url = process.env.BASE_URL;

const uri = `mongodb://${url}:27017`;
const client = new MongoClient(uri);

const transactionOptions = {
    readConcern: { level: 'snapshot' },
    writeConcern: { w: 'majority' },
    readPreference: 'primary'
};

const app = {
    initBankTrx: () => {
        (async () => await app.bankTrx())();
    },
    bankTrx: async () => {
        // Start the session
        const session = client.startSession();
        try {
            // Start the transaction in the session, specifying the transaction options
            session.startTransaction(transactionOptions);

            const database = client.db('ebankdb');
            const bankAccounts = database.collection('bankAccounts');
            const bankTrx = database.collection('bankTransactions');
            //insert new bank acconts
            const docBankAccount =
            {
                title: "Rejwanul Reja",
                accountType: "Savings",
                AccountNo: "0123254125",
                Branch: "DBBL Corporate Office",
                BankName: "DBBL"
            };
            const resBnkAcnt = await bankAccounts.insertOne(docBankAccount);
            if (!resBnkAcnt || !resBnkAcnt.insertedId) await session.abortTransaction();

            //insert new bank trx
            const docBankTrx = [
                {
                    bankAccountId: resBnkAcnt.insertedId,
                    TrxDate: new Date(),
                    accCode: "125474",
                    drAmunt: 125487,
                    crAmunt: 0,
                }, {
                    bankAccountId: resBnkAcnt.insertedId,
                    TrxDate: new Date(),
                    accCode: "125475",
                    drAmunt: 0,
                    crAmunt: 125487,
                }
            ];
            const resBnkTrx = await bankTrx.insertMany(docBankTrx);
            if (!resBnkTrx) await session.abortTransaction();

            await session.commitTransaction();
            console.log('Transaction successfully committed.');

            const dataBnkTrx = await bankTrx.find({});
            // Print returned documents
            for await (const item of dataBnkTrx) {
                console.dir(item);
            }
        }
        catch (error) {
            // if (error instanceof MongoError && error.hasErrorLabel('UnknownTransactionCommitResult')) {
            //     // Add your logic to retry or handle the error
            // }
            // else if (error instanceof MongoError && error.hasErrorLabel('TransientTransactionError')) {
            //     // Add your logic to retry or handle the error
            // } else {
            //     console.log('An error occured in the transaction, performing a data rollback:' + error);
            // }
            console.log(error);
            await session.abortTransaction();
        }
        finally {
            // End the session
            await session.endSession();
        }
    }
};

app.initBankTrx();


//https://stackoverflow.com/questions/51461952/mongodb-v4-0-transaction-mongoerror-transaction-numbers-are-only-allowed-on-a



